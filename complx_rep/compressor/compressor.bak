(* 28/12/2006 *)
(* Static analysis of BNG systems*)
(* Jerome Feret pour PlectiX *)
(* Compression *)
(* compressor.ml *)

open Printf
open Config
open Tools
open Data_structures
open Pb_sig
open Abstract_expr_sig
open Comment_sig  
  
module Compressor =
  (functor (A:AbstractExprBool) -> 
    (struct   
      let h s = A.atom_pos (A.K.E.V.var_of_b  s)
      let r_h s = A.r_atom (A.K.E.V.var_of_b s)
      let set_of_list l =    
	list_fold (fun k sol -> A.K.E.V.varset_add (A.K.E.V.var_of_b k) sol) l A.K.E.V.varset_empty	
      let run vars_init var_const var_var access rs dep messages = 
	if A.r_is_bot access 
	then A.K.empty_kleenean_rule_system,
	  list_fold
	    (fun (a,a',b) mes -> 
	      list_fold
		(fun (x,_) mes -> 
		  ("Warning, rule "^x^" cannot be applied")::mes)
		a mes)
	    rs messages 
	else 
	  
	let dep = fun x -> List.rev_map A.K.E.V.var_of_b (dep (A.K.E.V.b_of_var x)) in 
	let vars = set_of_list vars_init in 
	let vars_const = set_of_list var_const in 
	let vars_var = set_of_list var_var in 
	let rs = 
	  List.rev_map (fun (a,a',b) ->  
	    (List.rev_map (fun (a,b) -> (A.K.Id.id_of_string a,b)) a,
					  a',
				      List.rev_map (fun (a,b) -> A.K.E.V.var_of_b a,b) b)) rs in 
	let s = A.K.build_kleenean_rule_system rs vars in 
	let a,messages  = A.abstract_system s access vars_var dep messages in 
	let a,messages  = A.abstract_system a access vars_const dep messages in 
	a,messages
	  
	  
	  
      let parse pb  messages = 
	list_fold
	  begin 
	    (fun case (s,messages) -> 
	       (* id_of_species maps each specie onto the list of id of this spechie *)
	      let _ = trace_print  "PARSE CASE" in 
	      let id_of_species,specie_of_id = case.id_of_species,case.specie_of_id in 

	      	      
      (* possible_links is the list of any links between sites, we copy each generic sites according to each instance of species*)
	      let possible_links = 
		match pb.possible_links with Some x -> x
		| None -> 
		    list_fold 
		      (fun (a,_,c) sol ->
			list_fold 
			  (fun (a',_,c') sol -> 
			    list_fold 
			      (fun c sol -> 
				list_fold 
				  (fun c' sol -> ((a,c),(a',c'))::sol)
				  c' sol)
			      c sol)
			  pb.interface sol)
		      pb.interface [] in 
	      
	       (* interface_id build the set of triple (k,p,b) where k is a specie id, p the list of its phoporilasable site and b the list of its boundable sites.*)
	      let interface_id = case.interface_id in 
          
           
	      
	    (*special_link is the set of the link that defines passive species (the ones that may be connected to the active ones)*)
               (*anchor is the set of (id,site) that are used in the definition of passive species*)
	      let generic_special_link,special_link,sym_special_link,generic_anchor,anchor,anchors_of_species = 
		list_fold 
		  (fun ((a,ga,sa),(b,gb,sb)) (set0,set,set1,gset,set',map) -> 
		    String2Set.add (ga,gb) (String2Set.add (gb,ga) set0),
		    String22Set.add ((a,sa),(b,sb)) set,
		    BSet.add (l((a,ga,sa),(b,gb,sb))) set1,
		    String2Set.add (ga,sa) gset,
		    SiteSet.add (a,ga,sa) set',
		    let l = try (StringMap.find a map)
		    with _ -> StringSet.empty  in 
		    StringMap.add ga (StringSet.add sa l) map)
		  case.passive_species 
		  (String2Set.empty,String22Set.empty,BSet.empty,String2Set.empty,SiteSet.empty,StringMap.empty)  in
	      let possible_links_id = 
		list_fold
		  (fun ((a,b),(c,d)) sol -> 
		    list_fold 
		      (fun k sol -> 
			list_fold 
			  (fun k2 sol -> 
			    if (String2Set.mem (a,b) generic_anchor  
				  && StringSet.cardinal (StringMap.find a anchors_of_species) < 2  
				  && (not ((String22Set.mem ((k,b),(k2,d)) special_link) or String22Set.mem ((k2,d),(k,b)) special_link)))
				or 
			      (String2Set.mem (c,d) generic_anchor  
				 && StringSet.cardinal (StringMap.find c anchors_of_species) < 2
				 && (not ((String22Set.mem ((k2,d),(k,b)) special_link) or (String22Set.mem ((k,b),(k2,d)) special_link)))) 
				or (k=k2 && b=d)
 				or (b=d && a=c && (List.mem ((k2,c,d),(k,a,b)) sol)) then sol else 
			      (((k,a,b),(k2,c,d)))::sol)
			  (id_of_species c)
			  sol)
		      (id_of_species a)
		      sol)
		  possible_links [] in
	      
	      
                             (*link_of_site maps each site to the set of the link that share this site*)
              let link_of_site = 
                let fadd a b c = 
		  try (String2Map.add a (String2Set.add b (String2Map.find a c)) c)
		  with Not_found -> (String2Map.add a (String2Set.singleton b) c) in 
		list_fold 
		  (fun ((a,_,b),(c,_,d)) map 
		    -> let x,y = (a,b),(c,d) in 
		    fadd x y (fadd y x map))
		  possible_links_id String2Map.empty  in
	      
               (*link_of_species maps each id specie  to the set of link that share this specie*)
	      let link_of_species = 
		let fadd a (b1,b2) c = 
		  let rep = l(b1,b2) in 
		  try (StringMap.add a (BSet.add rep (StringMap.find a c)) c)
		  with 
		    Not_found -> (StringMap.add a (BSet.singleton rep) c) in 
		
		list_fold 
		  (fun ((a,a',b),(c,c',d)) map -> fadd a ((a,a',b),(c,c',d)) (fadd c ((a,a',b),(c,c',d)) map))
		  possible_links_id 
		  StringMap.empty in 
	      
               (*bool_of_specie maps each id specie to the set of its boolean attributes *)
	     
	      let bool_of_species = 
		list_fold 
		  (fun (a,b,c) sol -> 
		    let set = 
		      
			(list_fold 
			   (fun b set -> BSet.add (B(a,specie_of_id a,b)) set)
			   c 
			   (try (StringMap.find a sol) with _ -> BSet.empty)) in 
		    let set = 
		      if 
			(List.exists (fun ((s,_,_),_) -> s=a) case.passive_species)
		      then BSet.add (H(a,specie_of_id a)) set else set in 
		    

		    if BSet.is_empty set 
		    then sol
		    else StringMap.add a set sol)
		  interface_id 
		  link_of_species  in 
	      
	      
		(*var_init is the list of all boolean attributes (for each id specie)*)
	        (*dep is the list of all potential links *)
              let var_init,dep = 
		list_fold 
		  (fun ((a,b,_),_) (sol,dep) -> 
		  	(H(a,b)::sol,dep))
		  case.passive_species 
		  (list_fold 
		     (fun c (sol,dep) -> 
		       (l(c)::sol),
		       (l c)::dep)
		     possible_links_id
		     ((list_fold 
			 (fun (s,p,l) sol -> 
			   list_fold 
			     (fun p' sol -> 
			       list_fold 
				 (fun m sol ->
				   (M((s,specie_of_id s,p'),m)::sol))
				 pb.marks sol) p 
				 (list_fold (fun l' sol -> (B(s,specie_of_id s,l'))::sol)
				l sol))
			     interface_id []),[]))
		      in 
	      let dep =
		if !Config.ignore_dep then BMap.empty else 
		let fadd a b c = BMap.add a (b::(try (BMap.find a c) with _ -> [])) c in
		let fadd_sim a b c = fadd a b (fadd b a c) in 
		let dep = BMap.empty in 
	
		let dep = (* when we forget about one bit of information about the mark of a site, we forget all of them *)
		  list_fold (fun (a,b,c) dep -> 
		    list_fold (fun b dep ->
		      list_fold (fun m dep ->
			list_fold (fun m' dep -> 
			  if m=m' then dep
			  else 
			    let x = M((a,specie_of_id a,b),m) in 
		            let y = M((a,specie_of_id a,b),m') in 
			    fadd_sim  x y dep)
			  pb.marks dep)
			pb.marks dep)
		      b dep)
		    interface_id dep in
	
		

		let dep = (* optional dependences (Cf config.ml)*)
		  if !Config.ignore_dep then BMap.empty else 
		  dep in 
		
		let dep = (* we forget abount missing passive species *)
		  list_fold 
		    (fun ((a,a',b),(c,c',d)) map -> fadd (l((a,a',b),(c,c',d))) (H(a,specie_of_id a)) map)
		    case.passive_species dep in
		let dep = list_fold 
		    (fun ((a,a',b),(c,c',d)) map -> 
		      fadd (B(c,c',d)) (B(a,a',b)) (fadd  (B(c,c',d)) (H(a,a'))  map)) case.passive_species dep  in 
		let dep = (* when we abstract the fact that a site is here, we abstract all booleans about it *)
		  list_fold 
		    (fun (a,b,c) map ->
		      let k = H(a,specie_of_id a) in 
		      list_fold (fun b map -> 
			list_fold (fun m map -> 
			  fadd k (M((a,specie_of_id a,b),m)) map) pb.marks map)
			b
			(list_fold (fun c map ->
			  fadd k (B(a,specie_of_id a,c)) map) c map))
		    interface_id  dep  in
		let dep = (* when we abstract the fact that a site is bound, we forget about its linkage *)
		  list_fold 
		    (fun ((a1,a2,a3),(b1,b2,b3)) map -> 
		      let k = l((a1,a2,a3),(b1,b2,b3)) in
		      let k1 = (B(a1,a2,a3)) in 
		      let k2 = (B(b1,b2,b3)) in 
		      (fadd k1 k (fadd k2 k map)))
		    possible_links_id dep in 
		dep in  
	      let dep x = try (BMap.find x dep) with _ -> [] in
	      
	      
	      let access = 
		if !Config.enforce_structural_invariants 
		then 
		  begin 
		    let access = 
		      list_fold 
			(fun ((a,a',b),(c,c',d)) expr -> 
			  A.r_conj
			    expr 
			    (*whenever a passive species is bounded, it is bounded by its specified sites to specified sites *)
			    (A.r_imply (r_h (B(a,a',b)))
			       (r_h (l((a,a',b),(c,c',d))))))
			case.passive_species A.r_ae_true in 
		    let (access:A.reachable_states)  = 
		      (String2Map.fold 
			 (fun a s expr -> 
			   let up a = match a with (a,b) -> (a,specie_of_id a,b) in 
			   let upa = up a in 
			   A.r_conj 
			     expr 
			     (A.r_conj (
			      begin (* whenever a site is bound, *)
				if String2Set.is_empty s then A.r_ae_true 
				else if (* is it bound to a special complex ? *)
				  ((String2Set.fold 
				      (fun a' b -> 
					BSet.mem 
					  (l(up a,up a'))
					  sym_special_link & b)
				      s true) 
				     or SiteSet.mem upa anchor)
				then (* if true, it is bound to exactly one site *)
				  begin
				    A.r_imply 
				      (r_h (B(up a)))
				   (if not !Config.efficient 
				   then 
				     (A.reachable_states_of_expr (A.K.E.expr_exactly_once_in 
								    (let l =				   (String2Set.fold 
													      (fun a' b -> (A.K.E.V.var_of_b (l(upa,up a')))::b)
													      s 
   []) in l)))
				   else 
				      
				     (A.r_exactly_once_s (List.rev ((String2Set.fold (fun a' b -> ((l(upa,up a')))::b) s [])))))
				  end
				else (* otherwise, it is bound to atmost one site, (it may point to the context)*)
				  
				  begin
				    A.r_imply 
				      (r_h (B(upa)))
				      (if not !Config.efficient 
				      then 
					(A.reachable_states_of_expr ((A.K.E.expr_mutual_exclusion 
   (String2Set.fold 
   (fun a' b -> (A.K.E.V.var_of_b (l(upa,up a')))::b)
   s 
   []
   ))))
				      else	
					(A.r_atmost_once_s  (List.rev (String2Set.fold (fun a' b -> l(upa,up a')::b) s [])))
)				  end
			      end)
				begin (* when a site is not bound, it is bound to no other site *)
				  (A.r_imply 
				     (A.r_neg (r_h (B(upa))))
				     (if !Config.efficient then 
				     (A.r_all_false_s (List.rev (String2Set.fold (fun a' b -> l(upa,up a')::b) s []))) else 
    (A.r_imply 
			       (A.r_neg (r_h (B(upa))))
			       (String2Set.fold
				  (fun a' b -> 
				    A.r_conj 
				      (A.r_neg 
					 (r_h (l(upa,up a'))))
				      b)
				  s A.r_ae_true))))
				end))
			 link_of_site access) in 
		    let access =  (*if a passive species is not linked to active ones, all its attributes are equal to false *)
		      list_fold 
			(fun ((species,c',c),(a,a',b)) (expr:A.reachable_states) -> 
			  A.r_conj 
			    expr 
			    (if !Config.efficient 
			    then 
			      (A.r_imply 
			       (A.r_neg (r_h (l((a,a',b),(species,c',c)))))
			       (A.r_all_false_s 
				  ( (BSet.fold (fun a l -> a::l)) 
				     (try (StringMap.find species bool_of_species)
			       with _ -> BSet.empty) [])))
			    else 
			      (A.r_imply 
				 (A.r_neg (r_h (l((a,a',b),(species,c',c)))))
				 (A.r_neg 
				    (BSet.fold 
				       (fun a expr -> A.r_union (r_h a) expr)
				       (try (StringMap.find species bool_of_species)
				       with _ -> BSet.empty)
				       (A.r_neg (A.r_ae_true))))))
			)
			case.passive_species access in 
		    access 
		  end



		else A.r_ae_true in 
		(*we compute the list var_const of the attributes that can take only one value,*)
		(*and list var_val of the attributes that can take several values *)
	      
	      let access = 
		list_fold 
		  (fun (a,b,c) expr ->
		    list_fold (fun b expr -> 
		      let l = List.rev_map (fun x -> (M((a,specie_of_id a,b),x))) pb.marks in 
		      (A.r_conj expr 
			 (A.r_conj 
			    (A.r_imply (A.r_neg (r_h (H(a,specie_of_id a))))
			       (if !Config.efficient 
			       then A.r_all_false l 
			       else A.reachable_states_of_abstract_expr (A.all_false l)))
			    (A.r_imply (r_h (H(a,specie_of_id a)))
			       (if !Config.efficient 
			       then A.r_exactly_once l
			       else A.reachable_states_of_expr (A.K.E.expr_exactly_once_in 
							      (List.rev_map A.K.E.V.var_of_b l))))))
	)		  b expr) interface_id access in
	      			  
	      	      let access = (* we take into account explicit implication *)
                match case.implication with None -> access 
		| Some implication -> 
		    A.r_conj access implication in 
	      let var_const,var_val = 
		let full_map = 
		  list_fold 
		    (fun x map -> BMap.add x [false;true] map)
		    var_init BMap.empty in 
		let a = 
		  List.rev_map 
		    (fun rule  -> let r=rule.labels in let x=rule.injective_guard in 
		      list_fold 
			(fun (a,b) map -> BMap.add a [b] map)
			x full_map)
		    case.rules  in 
		list_fold 
		  (fun v (v1,v2) -> 
		    let rec aux l (rep:bool list) = 
		      match l,rep with 
			t::q,[a] -> 
			  if BMap.find v t  = rep
			  then aux q rep
			  else (v1,v::v2) (*v can take several values*)
		      | t::q,[] -> 
			  let l = (BMap.find v t) in 
			  if List.length l = 1 
			  then aux q l
			  else (v1,v::v2) (*v can take several values*)
		      |	[],_ -> (v::v1,v2) (*v takes at most one value*)
		      |	_ -> v1,v::v2 (*v can take several values*)
		    in aux a [])
		  var_init  ([],[]) in 
	        let _ = if !Config.trace then
		  (print_newline ();
		   print_string "VARCONST";
		   print_newline ();
		   List.iter print_b var_init;
		   print_newline ();
		   print_string "VARVAL";
		   print_newline ();
		   List.iter print_b var_val
		   )
		    in 
		let rs = case.rules in 
		let rs = List.rev_map (fun rule  -> (rule.labels,case.control,rule.expanded_guard)) rs in
		let rep ,messages = run 
		    var_init 
		    var_const 
		    var_val 
		    access 
		    rs 
		    dep
		    messages in 
		let int_of_id = case.old_id in 
		  
		(var_init,[rs],access,specie_of_id,int_of_id,case.dotset,
		  [rep])::s,messages)
	  end
	  (pb.system) ([],messages)


		    
     let print_kleenean_system ars =   
       List.iter (fun list -> 
	 List.iter (fun ((l,b),a) -> 
	   List.iter (fun r -> A.K.Id.print_id r;print_string ",") l;
	   print_string " ";
	   List.iter print_string a;

	   print_newline ()) list;
	 print_string "------------\n")
	 ars 
     let do_it pb  messages  =     
       let _ = trace_print "DOIT" in 
       let ars,messages  = parse pb messages in 
       let _ = trace_print "PARSE OK" in 
       let sol =      
	 begin
	   List.fold_left 
	     (fun liste (vars,rs,access,(sp_of_id:string->string),int_of_id,dotset,ars) -> 
	      
	       let vars = 
		    list_fold 
		      (fun a b -> A.K.E.V.varset_add (A.K.E.V.var_of_b a) b) vars A.K.E.V.varset_empty in
		  let ars_input = 
		    (list_map  
		    (fun rs  -> 
		      let rs = 
			list_map
			  (fun (a,b,c) -> 
			    (list_map (fun (a,copy) -> A.K.Id.id_of_string a,copy) a ,
			     b (*list_map (fun (a,b) -> A.K.E.V.var_of_b a,b) b,*),
			     list_map (fun (a,b) -> A.K.E.V.var_of_b a,b) c))
			  rs in 
		      A.K.extract_kleenean_rule_system 
			(A.K.build_kleenean_rule_system  
			   rs 
			   vars)) 
		       rs) in
		  let ars_output = list_map A.K.extract_kleenean_rule_system ars in 
		  let _ = 
		    (if !Config.trace_concrete_rules or !Config.trace_abstract_rules or !Config.trace_reachable_states 
		    then (print_string "**************************************";print_newline ();print_newline ()));
		    (if !Config.trace_reachable_states then 
		      begin
			print_string "REACHABLE STATES:";
			print_newline ();
			A.print_reachable_states  access 
			  sp_of_id 
			  pb (*sp_of_id parsed_pb*) 
			  true (*pb.marks*) stdout ;
		     print_newline () 
		      end);
		    let int_of_id = 
		      (fun x -> try (int_of_id x) with _ -> (print_string x;print_newline ();(-1))) in 
		    (if !Config.trace_concrete_rules then 
		      begin
			print_string "CONCRETE RULES:";
			print_newline ();
			print_newline ();
			try ( List.iter (fun a -> (A.K.print_kleenean_system (fun x -> try (StringMap.find x pb.flags) with _ -> print_string x;print_newline ();"")  (int_of_id) dotset a false (fun x-> x) true stdout);print_string "\n") ars_input) with _ -> ();
			  print_newline ()
		      end);
		    (if !Config.trace_abstract_rules then 
                      begin
			print_string "ABSTRACT RULES:";
			print_newline ();
			print_newline ();
			try (
			  List.iter (fun a -> (A.K.print_kleenean_system (fun x -> try (StringMap.find x pb.flags) with _ -> print_string x;print_newline ();"")  (int_of_id) dotset a false (fun x -> x) true stdout);print_newline ()) ars_output) with _ -> ();
			    print_newline ()
		      end) in 
		  (ars,ars_input,ars_output,vars,rs,access,(sp_of_id:string->string),(int_of_id:string-> int),dotset)::liste)
	     [] ars
		end in 
       let _ = 
	 begin
	   if !Config.dump_compression = "" 
	   then ()
	   else 
	     let output = open_out (!Config.dump_compression) in 
	     let print s = Printf.fprintf output s in 
	     let print_opt x  = 
	       if !Config.keep_comments then  print "%s" x else () in 
	     let dep,map,l = 
	       List.fold_left 
		 (fun (m1,m2,idl) (ars,ars_input,ars_output,vars,rs,access,sp_of_id,int_of_id,dotset) -> 
(*		   if copy then (m1,m2,idl) else *)
		   List.fold_left
		     (fun (m1,m2,idl) ars_output -> 
		       let m1',m2',idl' = 
			 A.K.ksfold 
			   (fun (l,c,g) -> 
			     match l with [] -> (StringMap.empty,StringMap.empty,[])
			     | (a1,copy1)::a2 -> 
				 (List.fold_left 
				    (fun (m1,m2,id) (a2,copy) -> 
				  (StringMap.add (A.K.Id.string_of_id a2) (A.K.Id.string_of_id a1) m1,m2,(A.K.Id.string_of_id a2)::id))
				    (StringMap.empty,
				     StringMap.add 
				       (A.K.Id.string_of_id a1) 
				       (A.K.build_kleenean_rule_system [[a1,copy1],c,(A.K.list_of_kleenean_valuation g)]  vars,sp_of_id,int_of_id,dotset) StringMap.empty,
				     [(A.K.Id.string_of_id a1)]) a2))
			   (fun (m1,n1,l1) (m2,n2,l2) -> ((StringMap.fold StringMap.add m2 m1),(StringMap.fold StringMap.add n2 n1),(l1@l2)))
			   ars_output
			   (StringMap.empty,StringMap.empty,[])
		       in
		       StringMap.fold StringMap.add m1' m1,StringMap.fold StringMap.add m2' m2,idl'@idl)
		     (m1,m2,idl) ars_output)
		 (StringMap.empty,StringMap.empty,[]) sol in 
	     let l = 
	       List.fold_left 
		 (fun idl (ars,ars_input,ars_output,vars,rs,access,sp_of_id,int_of_id,dotset) -> 
		   List.fold_left
		     (fun idl ars_input -> 
		       let idl' = 
			 A.K.ksfold 
			   (fun (l,c,g) -> 
			     match l with [] -> []
			     | (a1,copy1)::a2 -> 
				 (List.fold_left 
				    (fun id (a2,copy2) -> 
				      ((A.K.Id.string_of_id a2),copy2)::id)
				    [(A.K.Id.string_of_id a1),copy1] a2))
			   (fun l1 l2 -> 
			     (l1@l2))
			   ars_input []
		       in
		       idl'@idl)
		     idl ars_input) [] sol in 
	     let l = List.filter (fun (a,b) -> not b) l in 
	     let l = List.sort compare l in 
	     let rec aux cl  lid = 
	       match cl with 
		 [] -> ()
	       | (Decl a)::q -> 
		   (
		   print "%s" a;
		   print "\n";aux q lid )
	       | (Mutt a)::q -> 
		   (print_opt a;print_opt "\n";aux q  lid)
	       | (Rgl a)::q -> (
		   let name = 
		     try ( 
		       let id = 
			 let rec aux lid = 
			   let (id,copy) = List.hd lid in 
			   if not copy then id else aux (List.tl lid) in 
			 aux lid in 
		       let ars,sp_of_id,int_of_id,dotset  = StringMap.find id map in 
		       A.K.ksfold 
			 (fun (r,c,e)  -> 
			   list_fold 
			     (fun (r,copy) s -> 
			       if s = "" 
			       then 
				 "'"^(StringMap.find (A.K.Id.string_of_id r) pb.flags)^"'"
			       else 
				 "'"^(StringMap.find (A.K.Id.string_of_id r) pb.flags)^"',"^s)
			     r "")
			 (fun s1 s2 -> 
			   if s1="" then s2
			   else if s2="" then s1 
			   else s1^","^s2)
			 ars "")
		     with _ -> "" in 
		   let nspace = 
		     let rec aux k = 
		       try (match String.get  a.lhs k with 
			 ' ' -> aux (k+1)
		       | _ -> k)
		       with _ -> k in aux 0 in 
		   print_opt !Config.comment;
		   print_opt "former rule:";
		   print_opt "\n";
		   let oldflaglength = 
		     1+(if nspace = 0 then 1 else nspace)
		     + (max 1 (match a.flag with None -> 0
		     | Some s -> 2+(String.length (s))))
		   in 
		   let new_flaglength = String.length name + 1 in 
		   let _ = 
		     try (print_opt 
		       (String.make 
			  (new_flaglength - oldflaglength)
			  (String.get !Config.comment 0)))
		     with _ -> () in 
		   print_opt !Config.comment;
		   (match a.flag with 
		     None -> (print_opt !Config.comment)
		   | Some s -> (print_opt "'";
				print_opt s;
				print_opt "'"));
		   (if nspace=0 then print_opt " ");
		   print_opt  a.lhs;


				print_opt  (if a.dir=1 then "->" else "<->");
				print_opt  a.rhs;
				print_opt  a.comments;
				print_opt "\n";
				try (
				  (*let ((_,ars_input,ars_output,vars,rs,access,sp_of_id)::ars)=ars in *)
				  let f lid  = 
				    try (
				      let rec aux lid = 
					let (id,copy),lid = List.hd lid,List.tl lid in 
					
					if copy then aux lid else 
					((id,lid)) in 
				      let id,lid = aux lid in 
				      let dep = StringMap.find id dep in 
				      
				      let fl = (fun x -> "'"^StringMap.find x pb.flags^"'") dep in 
				      print_opt !Config.comment;
				      print_opt "Gathered with ";
				      print_opt fl;
				      print_opt "\n";lid)
				    with Not_found -> 
				      try ( 
					  let rec aux lid = 
					let (id,copy),lid = List.hd lid,List.tl lid in 
					if copy then aux lid else 
					(id,lid) in 
				      let id,lid = aux lid in 
				      let ars,sp_of_id,int_of_id,dotset  = StringMap.find id map in 
					 print_opt !Config.comment;
		   print_opt "simplified  rule:";
		   print_opt "\n";
					let _ = 
		     try (print_opt 
		       (String.make 
			  (oldflaglength - new_flaglength)
			  ' '))
		     with _ -> () in 	
					A.K.print_kleenean_system (fun x -> "'"^StringMap.find x pb.flags^"'") (int_of_id) dotset  ars false sp_of_id false output  ;
					print_opt " ";
					print_opt !Config.comment;
					print_opt  id;
					print "\n";lid) 
				      with Not_found -> (print_opt "Cannot be applied \n";let id,lid = List.hd lid,List.tl lid in   lid) in 
				  ((let lid = 
				    if a.dir = 1 then f lid else 
				    (let lid = f lid in f lid) in aux q lid)))
				with Not_found -> raise Exit 
	     )

	     in 
	     let cl =  
	       List.fold_left
		 (fun 
		   sol x -> 
	       let canal = (try (open_in x (*(List.hd (!Config.input_file))*)) with
		 _ -> print_string "ouverture du fichier impossible ";raise Exit) in
	       
	       (let lexbuf = Lexing.from_channel canal in
	       let result = Yacc.main Lexeur.token lexbuf in
	       (close_in canal;result@sol)))
	     [] (List.rev (!Config.input_file))
	     in 
	     
	     let _ = aux 
		 cl 
		 l  in 
	     let _ = print_opt "\n" in 
	     let _ = close_out output in 
	     ()
	       
       
	       
 	 end in 
      (),messages 
 	
  end))
