# 14 "ocamlbuild/lexers.mll"
 
exception Error of string
open Glob_ast

type conf_values =
  { plus_tags   : string list;
    minus_tags  : string list;
    plus_flags  : (string * string) list;
    minus_flags : (string * string) list }

type conf = (Glob.globber * conf_values) list

let empty = { plus_flags = []; minus_flags = []; plus_tags = []; minus_tags = [] }

# 17 "ocamlbuild/lexers.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\253\255\254\255\001\000\255\255\002\000\007\000\008\000\
    \012\000\017\000\022\000\033\000\013\000\003\000\038\000\043\000\
    \018\000\004\000\054\000\059\000\252\255\064\000\069\000\075\000\
    \080\000\090\000\096\000\023\000\027\000\086\000\102\000\104\000\
    \108\000\255\255\029\000\112\000\117\000\123\000\130\000\138\000\
    \145\000\151\000\156\000\160\000\164\000\166\000\175\000\181\000\
    \182\000\190\000\197\000\203\000\208\000\025\000\039\000\046\000\
    \061\000\065\000\079\000\218\000\250\255\128\000\026\000\226\000\
    \035\001\212\000\232\000\233\000\075\001\047\000\040\001\238\000\
    \081\001\251\255\130\001\155\001\166\001\202\001\252\000\215\001\
    \226\001\001\001\058\001\255\255\002\002\096\001\254\255\012\002\
    \140\001\052\000\046\001\051\001\102\001\116\000\040\000\127\000\
    \221\002\118\000\253\255\139\000\051\000\192\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\002\000\255\255\255\255\255\255\001\000\
    \000\000\002\000\255\255\255\255\002\000\002\000\000\000\002\000\
    \255\255\255\255\255\255\255\255\255\255\002\000\002\000\004\000\
    \004\000\255\255\255\255\000\000\255\255\255\255\001\000\003\000\
    \255\255\255\255\255\255\255\255\002\000\002\000\255\255\255\255\
    \000\000\255\255\001\000\003\000\255\255\255\255\255\255\001\000\
    \003\000\003\000\255\255\255\255\000\000\255\255\001\000\255\255\
    \002\000\000\000\255\255\255\255\255\255\005\000\002\000\005\000\
    \005\000\004\000\255\255\255\255\255\255\000\000\004\000\255\255\
    \255\255\255\255\003\000\003\000\003\000\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255\002\000\255\255\255\255\003\000\
    \255\255\001\000\000\000\002\000\255\255\255\255\003\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\001\000";
  Lexing.lex_default = 
   "\003\000\000\000\000\000\005\000\000\000\005\000\008\000\255\255\
    \008\000\008\000\008\000\014\000\255\255\255\255\014\000\014\000\
    \255\255\255\255\014\000\021\000\000\000\021\000\022\000\021\000\
    \021\000\021\000\021\000\255\255\028\000\030\000\030\000\030\000\
    \030\000\000\000\255\255\001\000\040\000\255\255\040\000\255\255\
    \040\000\042\000\042\000\042\000\042\000\255\255\047\000\047\000\
    \052\000\047\000\052\000\047\000\052\000\054\000\054\000\001\000\
    \057\000\057\000\057\000\061\000\000\000\066\000\255\255\067\000\
    \066\000\255\255\066\000\067\000\066\000\255\255\071\000\071\000\
    \074\000\000\000\074\000\074\000\079\000\087\000\085\000\079\000\
    \084\000\082\000\082\000\000\000\084\000\085\000\000\000\087\000\
    \001\000\255\255\255\255\255\255\255\255\095\000\255\255\095\000\
    \255\255\097\000\000\000\255\255\002\000\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\255\255\255\255\001\000\255\255\255\255\
    \009\000\002\000\002\000\009\000\007\000\255\255\255\255\017\000\
    \255\255\255\255\010\000\002\000\017\000\010\000\007\000\010\000\
    \002\000\004\000\010\000\007\000\001\000\004\000\034\000\009\000\
    \027\000\034\000\015\000\013\000\255\255\015\000\012\000\255\255\
    \255\255\010\000\255\255\255\255\018\000\017\000\010\000\018\000\
    \016\000\004\000\001\000\004\000\004\000\034\000\002\000\018\000\
    \017\000\015\000\018\000\016\000\023\000\023\000\255\255\023\000\
    \024\000\255\255\255\255\018\000\255\255\255\255\028\000\004\000\
    \096\000\028\000\027\000\020\000\025\000\025\000\018\000\025\000\
    \026\000\025\000\025\000\023\000\025\000\026\000\022\000\031\000\
    \255\255\255\255\031\000\025\000\025\000\028\000\025\000\026\000\
    \056\000\025\000\025\000\025\000\025\000\026\000\022\000\034\000\
    \025\000\032\000\034\000\022\000\032\000\032\000\031\000\058\000\
    \032\000\037\000\025\000\255\255\037\000\022\000\038\000\000\000\
    \025\000\038\000\020\000\022\000\039\000\000\000\034\000\039\000\
    \032\000\058\000\255\255\038\000\032\000\255\255\038\000\101\000\
    \037\000\000\000\255\255\039\000\255\255\038\000\039\000\000\000\
    \255\255\094\000\255\255\039\000\036\000\255\255\255\255\098\000\
    \043\000\255\255\038\000\043\000\255\255\045\000\000\000\038\000\
    \045\000\044\000\039\000\000\000\044\000\044\000\255\255\045\000\
    \044\000\255\255\045\000\097\000\097\000\000\000\038\000\043\000\
    \049\000\000\000\065\000\049\000\045\000\255\255\255\255\050\000\
    \044\000\255\255\050\000\020\000\044\000\000\000\045\000\051\000\
    \255\255\000\000\051\000\000\000\255\255\000\000\050\000\049\000\
    \255\255\050\000\099\000\000\000\051\000\255\255\050\000\051\000\
    \000\000\255\255\000\000\048\000\255\255\065\000\051\000\000\000\
    \065\000\255\255\255\255\064\000\001\000\050\000\064\000\062\000\
    \004\000\004\000\050\000\051\000\004\000\000\000\000\000\069\000\
    \255\255\255\255\255\255\004\000\065\000\255\255\069\000\050\000\
    \004\000\000\000\064\000\069\000\255\255\063\000\000\000\000\000\
    \002\000\255\255\255\255\002\000\002\000\000\000\255\255\255\255\
    \000\000\255\255\000\000\255\255\255\255\002\000\255\255\000\000\
    \000\000\255\255\002\000\000\000\060\000\000\000\255\255\000\000\
    \000\000\001\000\000\000\002\000\070\000\033\000\000\000\000\000\
    \000\000\002\000\065\000\070\000\255\255\255\255\255\255\004\000\
    \000\000\255\255\255\255\002\000\068\000\001\000\002\000\068\000\
    \062\000\070\000\004\000\001\000\070\000\069\000\002\000\090\000\
    \000\000\000\000\090\000\020\000\092\000\255\255\000\000\092\000\
    \255\255\255\255\000\000\068\000\255\255\002\000\067\000\255\255\
    \070\000\000\000\000\000\020\000\000\000\000\000\090\000\255\255\
    \020\000\000\000\000\000\092\000\068\000\001\000\001\000\068\000\
    \062\000\000\000\020\000\073\000\000\000\065\000\073\000\090\000\
    \020\000\000\000\255\255\083\000\000\000\000\000\033\000\000\000\
    \001\000\000\000\255\255\068\000\001\000\255\255\067\000\092\000\
    \002\000\073\000\092\000\000\000\073\000\255\255\255\255\000\000\
    \073\000\073\000\073\000\002\000\075\000\073\000\076\000\255\255\
    \255\255\000\000\255\255\000\000\000\000\065\000\092\000\000\000\
    \255\255\086\000\002\000\073\000\255\255\000\000\000\000\255\255\
    \000\000\255\255\090\000\000\000\000\000\091\000\002\000\001\000\
    \091\000\089\000\000\000\000\000\033\000\000\000\000\000\000\000\
    \001\000\000\000\255\255\000\000\001\000\255\255\033\000\000\000\
    \255\255\255\255\078\000\255\255\091\000\000\000\255\255\001\000\
    \255\255\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \090\000\000\000\000\000\255\255\077\000\000\000\001\000\000\000\
    \000\000\000\000\255\255\078\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\001\000\000\000\255\255\078\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\077\000\000\000\255\255\
    \000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\
    \077\000\255\255\002\000\000\000\255\255\000\000\000\000\000\000\
    \255\255\002\000\255\255\000\000\255\255\000\000\002\000\255\255\
    \000\000\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\000\000\255\255\081\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \000\000\080\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\255\255\000\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\255\255\020\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\255\255\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
    \000\000\073\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\002\000\000\000\
    \000\000\000\000\096\000\000\000\255\255\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\097\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \000\000\000\000\000\000\000\000\096\000\000\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\003\000\005\000\000\000\003\000\005\000\
    \006\000\006\000\007\000\006\000\006\000\008\000\008\000\012\000\
    \008\000\008\000\009\000\009\000\016\000\009\000\009\000\010\000\
    \010\000\027\000\010\000\010\000\062\000\028\000\034\000\006\000\
    \028\000\034\000\011\000\011\000\008\000\011\000\011\000\014\000\
    \014\000\009\000\014\000\014\000\015\000\015\000\010\000\015\000\
    \015\000\069\000\000\000\003\000\005\000\034\000\089\000\018\000\
    \018\000\011\000\018\000\018\000\019\000\019\000\014\000\019\000\
    \019\000\021\000\021\000\015\000\021\000\021\000\022\000\022\000\
    \094\000\022\000\022\000\053\000\023\000\023\000\018\000\023\000\
    \023\000\024\000\024\000\019\000\024\000\024\000\019\000\029\000\
    \021\000\054\000\029\000\025\000\025\000\022\000\025\000\025\000\
    \055\000\026\000\026\000\023\000\026\000\026\000\023\000\030\000\
    \024\000\031\000\030\000\024\000\031\000\032\000\029\000\056\000\
    \032\000\035\000\025\000\057\000\035\000\025\000\036\000\255\255\
    \026\000\036\000\029\000\026\000\037\000\255\255\030\000\037\000\
    \031\000\058\000\061\000\038\000\032\000\061\000\038\000\100\000\
    \035\000\255\255\030\000\039\000\031\000\036\000\039\000\255\255\
    \032\000\093\000\040\000\037\000\035\000\040\000\097\000\097\000\
    \041\000\036\000\038\000\041\000\095\000\042\000\255\255\037\000\
    \042\000\043\000\039\000\255\255\043\000\044\000\038\000\045\000\
    \044\000\040\000\045\000\099\000\099\000\255\255\039\000\041\000\
    \046\000\255\255\061\000\046\000\042\000\040\000\047\000\048\000\
    \043\000\047\000\048\000\041\000\044\000\255\255\045\000\049\000\
    \042\000\255\255\049\000\255\255\043\000\255\255\050\000\046\000\
    \044\000\050\000\097\000\255\255\051\000\047\000\048\000\051\000\
    \255\255\052\000\255\255\046\000\052\000\065\000\049\000\255\255\
    \065\000\047\000\048\000\059\000\059\000\050\000\059\000\059\000\
    \101\000\101\000\049\000\051\000\063\000\255\255\255\255\063\000\
    \052\000\050\000\066\000\067\000\065\000\066\000\067\000\051\000\
    \071\000\255\255\059\000\071\000\052\000\059\000\255\255\255\255\
    \000\000\003\000\005\000\013\000\017\000\255\255\078\000\006\000\
    \255\255\078\000\255\255\081\000\008\000\012\000\081\000\255\255\
    \255\255\009\000\016\000\255\255\059\000\255\255\010\000\255\255\
    \255\255\053\000\255\255\028\000\063\000\034\000\255\255\255\255\
    \255\255\011\000\066\000\067\000\078\000\078\000\014\000\054\000\
    \255\255\081\000\081\000\015\000\064\000\064\000\055\000\064\000\
    \064\000\070\000\070\000\100\000\070\000\070\000\018\000\090\000\
    \255\255\255\255\090\000\019\000\091\000\056\000\255\255\091\000\
    \021\000\057\000\255\255\064\000\082\000\022\000\064\000\082\000\
    \070\000\255\255\255\255\023\000\255\255\255\255\090\000\058\000\
    \024\000\255\255\255\255\091\000\068\000\068\000\029\000\068\000\
    \068\000\255\255\025\000\072\000\255\255\064\000\072\000\091\000\
    \026\000\255\255\082\000\082\000\255\255\255\255\030\000\255\255\
    \031\000\255\255\085\000\068\000\032\000\085\000\068\000\092\000\
    \035\000\072\000\092\000\255\255\093\000\036\000\097\000\255\255\
    \072\000\072\000\072\000\037\000\072\000\072\000\072\000\095\000\
    \061\000\255\255\038\000\255\255\255\255\068\000\092\000\255\255\
    \085\000\085\000\039\000\072\000\074\000\255\255\255\255\074\000\
    \255\255\040\000\092\000\255\255\255\255\088\000\088\000\041\000\
    \088\000\088\000\255\255\255\255\042\000\255\255\255\255\255\255\
    \043\000\255\255\074\000\255\255\044\000\075\000\045\000\255\255\
    \075\000\074\000\074\000\074\000\088\000\255\255\074\000\046\000\
    \076\000\255\255\255\255\076\000\255\255\047\000\048\000\255\255\
    \088\000\255\255\255\255\075\000\074\000\255\255\049\000\255\255\
    \255\255\255\255\075\000\075\000\075\000\050\000\076\000\075\000\
    \255\255\255\255\255\255\051\000\255\255\076\000\076\000\076\000\
    \052\000\255\255\076\000\255\255\077\000\075\000\255\255\077\000\
    \255\255\255\255\059\000\255\255\255\255\255\255\255\255\255\255\
    \076\000\079\000\063\000\255\255\079\000\255\255\255\255\255\255\
    \066\000\067\000\077\000\255\255\080\000\255\255\071\000\080\000\
    \255\255\077\000\077\000\077\000\255\255\255\255\077\000\079\000\
    \255\255\255\255\255\255\255\255\078\000\255\255\079\000\079\000\
    \079\000\081\000\080\000\079\000\077\000\255\255\255\255\255\255\
    \255\255\080\000\080\000\080\000\084\000\255\255\080\000\084\000\
    \255\255\079\000\255\255\255\255\255\255\255\255\087\000\255\255\
    \255\255\087\000\255\255\255\255\080\000\255\255\255\255\255\255\
    \255\255\255\255\084\000\064\000\255\255\255\255\255\255\255\255\
    \070\000\084\000\084\000\084\000\087\000\255\255\084\000\255\255\
    \255\255\255\255\255\255\087\000\087\000\087\000\255\255\255\255\
    \087\000\255\255\082\000\255\255\084\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\087\000\255\255\
    \255\255\255\255\255\255\068\000\255\255\255\255\255\255\255\255\
    \255\255\072\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \085\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\074\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\088\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\075\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\076\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\077\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\079\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\080\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\084\000\255\255\255\255\255\255\096\000\255\255\
    \255\255\255\255\096\000\255\255\087\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \255\255\255\255\255\255\255\255\096\000\255\255\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\002\000\006\000\000\000\000\000\000\000\007\000\
    \000\000\000\000\008\000\012\000\000\000\000\000\000\000\017\000\
    \033\000\038\000\043\000\000\000\000\000\045\000\049\000\050\000\
    \051\000\018\000\000\000\020\000\059\000\022\000\060\000\023\000\
    \000\000\064\000\075\000\088\000\089\000\000\000\090\000\000\000\
    \094\000\103\000\104\000\105\000\000\000\000\000\000\000\016\000\
    \020\000\000\000\021\000\118\000\000\000\128\000\000\000\129\000\
    \142\000\000\000\130\000\135\000\147\000\000\000\000\000\000\000\
    \151\000\000\000\157\000\167\000\200\000\000\000\000\000\206\000\
    \000\000\000\000\000\000\089\000\000\000\000\000\018\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\
    \142\001\000\000\004\000\000\000\000\000\000\000";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\004\000\004\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\015\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\000\000\015\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\
    \000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\045\000\000\000\000\000\000\000\000\000\060\000\000\000\
    \000\000\000\000\015\000\015\000\015\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_default_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\007\000\007\000\007\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\007\000\007\000\007\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\029\000\000\000\037\000\000\000\037\000\
    \029\000\000\000\029\000\029\000\037\000\000\000\000\000\000\000\
    \007\000\000\000\007\000\072\000\079\000\000\000\000\000\084\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\000\000\
    \001\000\001\000\001\000\001\000\000\000\001\000\001\000\000\000\
    \001\000\001\000\001\000\000\000\000\000\000\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\010\000\001\000\
    \001\000\010\000\000\000\010\000\010\000\000\000\010\000\010\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\010\000\001\000\001\000\010\000\010\000\001\000\001\000\
    \000\000\000\000\010\000\010\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\001\000\000\000\000\000\000\000\
    \010\000\010\000\010\000\001\000\010\000\010\000\001\000\023\000\
    \000\000\000\000\023\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\023\000\001\000\001\000\023\000\001\000\000\000\000\000\
    \010\000\010\000\001\000\000\000\000\000\000\000\023\000\032\000\
    \000\000\000\000\032\000\000\000\000\000\000\000\023\000\001\000\
    \023\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\023\000\000\000\023\000\032\000\010\000\
    \000\000\000\000\010\000\000\000\053\000\000\000\000\000\053\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
    \000\000\000\000\000\000\053\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\042\000\050\000\000\000\000\000\000\000\
    \000\000\000\000\065\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\050\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\000\000\000\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\000\000\000\000\000\000\000\000\001\000\000\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\006\000\009\000\010\000\006\000\009\000\010\000\011\000\
    \015\000\018\000\011\000\015\000\018\000\019\000\019\000\255\255\
    \019\000\019\000\023\000\023\000\255\255\023\000\023\000\255\255\
    \006\000\009\000\010\000\255\255\255\255\255\255\011\000\015\000\
    \018\000\094\000\024\000\024\000\019\000\024\000\024\000\025\000\
    \025\000\023\000\025\000\025\000\026\000\026\000\029\000\026\000\
    \026\000\029\000\030\000\031\000\032\000\030\000\031\000\032\000\
    \035\000\024\000\037\000\039\000\036\000\038\000\025\000\036\000\
    \038\000\041\000\055\000\026\000\041\000\029\000\056\000\058\000\
    \255\255\030\000\031\000\032\000\042\000\255\255\255\255\042\000\
    \255\255\029\000\255\255\036\000\038\000\030\000\031\000\032\000\
    \041\000\043\000\044\000\046\000\043\000\044\000\046\000\048\000\
    \255\255\255\255\048\000\042\000\041\000\255\255\255\255\255\255\
    \049\000\050\000\051\000\049\000\050\000\051\000\255\255\042\000\
    \043\000\044\000\046\000\255\255\255\255\255\255\048\000\059\000\
    \059\000\255\255\059\000\059\000\043\000\044\000\046\000\049\000\
    \050\000\051\000\061\000\063\000\066\000\061\000\063\000\066\000\
    \255\255\067\000\255\255\049\000\067\000\051\000\059\000\064\000\
    \064\000\255\255\064\000\064\000\068\000\068\000\255\255\068\000\
    \068\000\072\000\255\255\255\255\072\000\255\255\255\255\074\000\
    \255\255\255\255\074\000\255\255\255\255\255\255\064\000\255\255\
    \059\000\075\000\255\255\068\000\075\000\255\255\255\255\072\000\
    \255\255\255\255\061\000\063\000\066\000\074\000\072\000\072\000\
    \072\000\067\000\072\000\072\000\074\000\074\000\074\000\075\000\
    \064\000\074\000\255\255\255\255\255\255\068\000\075\000\075\000\
    \075\000\072\000\076\000\075\000\255\255\076\000\255\255\074\000\
    \079\000\255\255\255\255\079\000\255\255\255\255\255\255\255\255\
    \255\255\075\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \076\000\255\255\255\255\255\255\255\255\255\255\079\000\076\000\
    \076\000\076\000\255\255\255\255\076\000\079\000\079\000\079\000\
    \255\255\255\255\079\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\076\000\255\255\255\255\255\255\255\255\255\255\
    \079\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\029\000\255\255\255\255\
    \255\255\030\000\031\000\032\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \041\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\042\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \043\000\044\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\059\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \061\000\063\000\066\000\255\255\255\255\255\255\255\255\067\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\064\000\255\255\
    \255\255\255\255\255\255\068\000\255\255\255\255\255\255\072\000\
    \255\255\255\255\255\255\255\255\255\255\074\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\075\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\096\000\255\255\255\255\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \076\000\255\255\255\255\255\255\255\255\255\255\079\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\255\255\255\255\255\255\255\255\096\000\255\255\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\096\000\096\000\096\000\096\000\096\000\096\000\096\000\
    \096\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_code = 
   "\255\001\255\255\000\001\255\004\255\255\003\255\002\255\255\000\
    \003\255\000\002\001\004\255\002\255\255\000\002\255\003\255\255\
    \004\255\003\255\255\004\002\003\255\255\004\002\255\000\002\001\
    \003\255\002\004\255\004\002\002\255\003\255\255\000\004\001\003\
    \255\006\255\005\255\004\255\255\003\006\002\005\004\255\255\007\
    \255\004\255\255\004\255\007\255\255\000\007\255";
}

let rec ocamldep_output lexbuf =
    __ocaml_lex_ocamldep_output_rec lexbuf 0
and __ocaml_lex_ocamldep_output_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 45 "ocamlbuild/lexers.mll"
                            k
# 536 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_curr_pos + -1) in
# 45 "ocamlbuild/lexers.mll"
                                   ( let x = (k, space_sep_strings_nl lexbuf) in x :: ocamldep_output lexbuf )
# 540 "ocamlbuild/lexers.ml"

  | 1 ->
# 46 "ocamlbuild/lexers.mll"
        ( [] )
# 545 "ocamlbuild/lexers.ml"

  | 2 ->
# 47 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting colon followed by space-separated module name list") )
# 550 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_ocamldep_output_rec lexbuf __ocaml_lex_state

and space_sep_strings_nl lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_space_sep_strings_nl_rec lexbuf 6
and __ocaml_lex_space_sep_strings_nl_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 50 "ocamlbuild/lexers.mll"
                          word
# 564 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 50 "ocamlbuild/lexers.mll"
                                ( word :: space_sep_strings_nl lexbuf )
# 568 "ocamlbuild/lexers.ml"

  | 1 ->
# 51 "ocamlbuild/lexers.mll"
                   ( [] )
# 573 "ocamlbuild/lexers.ml"

  | 2 ->
# 52 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting space-separated strings terminated with newline") )
# 578 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_space_sep_strings_nl_rec lexbuf __ocaml_lex_state

and space_sep_strings lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_space_sep_strings_rec lexbuf 11
and __ocaml_lex_space_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 55 "ocamlbuild/lexers.mll"
                          word
# 592 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 55 "ocamlbuild/lexers.mll"
                                ( word :: space_sep_strings lexbuf )
# 596 "ocamlbuild/lexers.ml"

  | 1 ->
# 56 "ocamlbuild/lexers.mll"
                        ( [] )
# 601 "ocamlbuild/lexers.ml"

  | 2 ->
# 57 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting space-separated strings") )
# 606 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_space_sep_strings_rec lexbuf __ocaml_lex_state

and blank_sep_strings lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_blank_sep_strings_rec lexbuf 19
and __ocaml_lex_blank_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 60 "ocamlbuild/lexers.mll"
                                    ( blank_sep_strings lexbuf )
# 619 "ocamlbuild/lexers.ml"

  | 1 ->
# 61 "ocamlbuild/lexers.mll"
                                ( [] )
# 624 "ocamlbuild/lexers.ml"

  | 2 ->
let
# 62 "ocamlbuild/lexers.mll"
                          word
# 630 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 62 "ocamlbuild/lexers.mll"
                                ( word :: blank_sep_strings lexbuf )
# 634 "ocamlbuild/lexers.ml"

  | 3 ->
# 63 "ocamlbuild/lexers.mll"
               ( [] )
# 639 "ocamlbuild/lexers.ml"

  | 4 ->
# 64 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting blank-separated strings") )
# 644 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_blank_sep_strings_rec lexbuf __ocaml_lex_state

and comma_sep_strings lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 5 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_sep_strings_rec lexbuf 29
and __ocaml_lex_comma_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 67 "ocamlbuild/lexers.mll"
                                    word
# 659 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 67 "ocamlbuild/lexers.mll"
                                                     ( [word] )
# 663 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 68 "ocamlbuild/lexers.mll"
                                    word
# 669 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 68 "ocamlbuild/lexers.mll"
                                          ( word :: comma_sep_strings_aux lexbuf )
# 673 "ocamlbuild/lexers.ml"

  | 2 ->
# 69 "ocamlbuild/lexers.mll"
               ( [] )
# 678 "ocamlbuild/lexers.ml"

  | 3 ->
# 70 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting comma-separated strings (1)") )
# 683 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comma_sep_strings_rec lexbuf __ocaml_lex_state

and comma_sep_strings_aux lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ;   __ocaml_lex_comma_sep_strings_aux_rec lexbuf 35
and __ocaml_lex_comma_sep_strings_aux_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 72 "ocamlbuild/lexers.mll"
                                               word
# 695 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 72 "ocamlbuild/lexers.mll"
                                                     ( word :: comma_sep_strings_aux lexbuf )
# 699 "ocamlbuild/lexers.ml"

  | 1 ->
# 73 "ocamlbuild/lexers.mll"
               ( [] )
# 704 "ocamlbuild/lexers.ml"

  | 2 ->
# 74 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting comma-separated strings (2)") )
# 709 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comma_sep_strings_aux_rec lexbuf __ocaml_lex_state

and comma_or_blank_sep_strings lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 5 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_or_blank_sep_strings_rec lexbuf 41
and __ocaml_lex_comma_or_blank_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 77 "ocamlbuild/lexers.mll"
                                    word
# 724 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 77 "ocamlbuild/lexers.mll"
                                                     ( [word] )
# 728 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 78 "ocamlbuild/lexers.mll"
                                    word
# 734 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 78 "ocamlbuild/lexers.mll"
                                          ( word :: comma_or_blank_sep_strings_aux lexbuf )
# 738 "ocamlbuild/lexers.ml"

  | 2 ->
# 79 "ocamlbuild/lexers.mll"
               ( [] )
# 743 "ocamlbuild/lexers.ml"

  | 3 ->
# 80 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting (comma|blank)-separated strings (1)") )
# 748 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comma_or_blank_sep_strings_rec lexbuf __ocaml_lex_state

and comma_or_blank_sep_strings_aux lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 3 (-1) ; (* L=1 [1] <- p ;  *)
  lexbuf.Lexing.lex_mem.(1) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_comma_or_blank_sep_strings_aux_rec lexbuf 46
and __ocaml_lex_comma_or_blank_sep_strings_aux_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 82 "ocamlbuild/lexers.mll"
                                               word
# 762 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 82 "ocamlbuild/lexers.mll"
                                                     ( word :: comma_or_blank_sep_strings_aux lexbuf )
# 766 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 83 "ocamlbuild/lexers.mll"
                                    word
# 772 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 83 "ocamlbuild/lexers.mll"
                                          ( word :: comma_or_blank_sep_strings_aux lexbuf )
# 776 "ocamlbuild/lexers.ml"

  | 2 ->
# 84 "ocamlbuild/lexers.mll"
               ( [] )
# 781 "ocamlbuild/lexers.ml"

  | 3 ->
# 85 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting (comma|blank)-separated strings (2)") )
# 786 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comma_or_blank_sep_strings_aux_rec lexbuf __ocaml_lex_state

and colon_sep_strings lexbuf =
    __ocaml_lex_colon_sep_strings_rec lexbuf 53
and __ocaml_lex_colon_sep_strings_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 88 "ocamlbuild/lexers.mll"
                 word
# 798 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 88 "ocamlbuild/lexers.mll"
                           ( [word] )
# 802 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 89 "ocamlbuild/lexers.mll"
                 word
# 808 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 89 "ocamlbuild/lexers.mll"
                       ( word :: colon_sep_strings_aux lexbuf )
# 812 "ocamlbuild/lexers.ml"

  | 2 ->
# 90 "ocamlbuild/lexers.mll"
        ( [] )
# 817 "ocamlbuild/lexers.ml"

  | 3 ->
# 91 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting colon-separated strings (1)") )
# 822 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_colon_sep_strings_rec lexbuf __ocaml_lex_state

and colon_sep_strings_aux lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ;   __ocaml_lex_colon_sep_strings_aux_rec lexbuf 55
and __ocaml_lex_colon_sep_strings_aux_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 93 "ocamlbuild/lexers.mll"
                      word
# 834 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 93 "ocamlbuild/lexers.mll"
                            ( word :: colon_sep_strings_aux lexbuf )
# 838 "ocamlbuild/lexers.ml"

  | 1 ->
# 94 "ocamlbuild/lexers.mll"
        ( [] )
# 843 "ocamlbuild/lexers.ml"

  | 2 ->
# 95 "ocamlbuild/lexers.mll"
      ( raise (Error "Expecting colon-separated strings (2)") )
# 848 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_colon_sep_strings_aux_rec lexbuf __ocaml_lex_state

and conf_lines dir pos err lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 5 (-1) ; (* L=1 [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_conf_lines_rec dir pos err lexbuf 59
and __ocaml_lex_conf_lines_rec dir pos err lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 98 "ocamlbuild/lexers.mll"
                                    ( conf_lines dir (pos + 1) err lexbuf )
# 861 "ocamlbuild/lexers.ml"

  | 1 ->
# 99 "ocamlbuild/lexers.mll"
                                ( [] )
# 866 "ocamlbuild/lexers.ml"

  | 2 ->
# 100 "ocamlbuild/lexers.mll"
                   ( conf_lines dir (pos + 1) err lexbuf )
# 871 "ocamlbuild/lexers.ml"

  | 3 ->
# 101 "ocamlbuild/lexers.mll"
               ( [] )
# 876 "ocamlbuild/lexers.ml"

  | 4 ->
let
# 102 "ocamlbuild/lexers.mll"
                                      k
# 882 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1) in
# 103 "ocamlbuild/lexers.mll"
      (
        let bexpr = Glob.parse ?dir k in
        let v1 = conf_value pos err empty lexbuf in
        let v2 = conf_values pos err v1 lexbuf in
        let rest = conf_lines dir (pos + 1) err lexbuf in (bexpr, v2) :: rest
      )
# 891 "ocamlbuild/lexers.ml"

  | 5 ->
# 109 "ocamlbuild/lexers.mll"
      ( raise (Error(Printf.sprintf "Bad key in configuration line at line %d (from %s)" pos err)) )
# 896 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_conf_lines_rec dir pos err lexbuf __ocaml_lex_state

and conf_value pos err x lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 8 (-1) ; (* L=2 [3] <- p ; [2] <- p ;  *)
  lexbuf.Lexing.lex_mem.(3) <- lexbuf.Lexing.lex_curr_pos ;
  lexbuf.Lexing.lex_mem.(2) <- lexbuf.Lexing.lex_curr_pos ;
  __ocaml_lex_conf_value_rec pos err x lexbuf 72
and __ocaml_lex_conf_value_rec pos err x lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 112 "ocamlbuild/lexers.mll"
                       t1
# 911 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_mem.(0)
and
# 112 "ocamlbuild/lexers.mll"
                                              t2
# 916 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 112 "ocamlbuild/lexers.mll"
                                                      ( { (x) with minus_flags = (t1, t2) :: x.minus_flags } )
# 920 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 113 "ocamlbuild/lexers.mll"
                       t1
# 926 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_mem.(1)
and
# 113 "ocamlbuild/lexers.mll"
                                              t2
# 931 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(1) + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 113 "ocamlbuild/lexers.mll"
                                                      ( { (x) with plus_flags = (t1, t2) :: x.plus_flags } )
# 935 "ocamlbuild/lexers.ml"

  | 2 ->
let
# 114 "ocamlbuild/lexers.mll"
                 tag
# 941 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 114 "ocamlbuild/lexers.mll"
                      ( { (x) with minus_tags = tag :: x.minus_tags } )
# 945 "ocamlbuild/lexers.ml"

  | 3 ->
let
# 115 "ocamlbuild/lexers.mll"
                 tag
# 951 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_mem.(0) lexbuf.Lexing.lex_curr_pos in
# 115 "ocamlbuild/lexers.mll"
                      ( { (x) with plus_tags = tag :: x.plus_tags } )
# 955 "ocamlbuild/lexers.ml"

  | 4 ->
# 116 "ocamlbuild/lexers.mll"
              ( raise (Error(Printf.sprintf "Bad value in configuration line at line %d (from %s)" pos err)) )
# 960 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_conf_value_rec pos err x lexbuf __ocaml_lex_state

and conf_values pos err x lexbuf =
    __ocaml_lex_conf_values_rec pos err x lexbuf 88
and __ocaml_lex_conf_values_rec pos err x lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 119 "ocamlbuild/lexers.mll"
                      ( conf_values pos err (conf_value pos err x lexbuf) lexbuf )
# 971 "ocamlbuild/lexers.ml"

  | 1 ->
# 120 "ocamlbuild/lexers.mll"
                    ( x )
# 976 "ocamlbuild/lexers.ml"

  | 2 ->
# 121 "ocamlbuild/lexers.mll"
              ( raise (Error(Printf.sprintf "Bad values in configuration line at line %d (from %s)" pos err)) )
# 981 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_conf_values_rec pos err x lexbuf __ocaml_lex_state

and path_scheme patt_allowed lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 2 (-1) ;   __ocaml_lex_path_scheme_rec patt_allowed lexbuf 93
and __ocaml_lex_path_scheme_rec patt_allowed lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 124 "ocamlbuild/lexers.mll"
                  prefix
# 993 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 125 "ocamlbuild/lexers.mll"
      ( `Word prefix :: path_scheme patt_allowed lexbuf )
# 997 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 126 "ocamlbuild/lexers.mll"
                      var
# 1003 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) (lexbuf.Lexing.lex_curr_pos + -1) in
# 127 "ocamlbuild/lexers.mll"
      ( `Var (var, Bool.True) :: path_scheme patt_allowed lexbuf )
# 1007 "ocamlbuild/lexers.ml"

  | 2 ->
let
# 128 "ocamlbuild/lexers.mll"
                      var
# 1013 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_mem.(0)
and
# 128 "ocamlbuild/lexers.mll"
                                           patt
# 1018 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_mem.(0) + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 129 "ocamlbuild/lexers.mll"
      ( if patt_allowed then
          let patt = My_std.String.implode (unescape (Lexing.from_string patt)) in
          `Var (var, Glob.parse patt) :: path_scheme patt_allowed lexbuf
        else raise (Error(
          Printf.sprintf "Patterns are not allowed in this pathname (%%(%s:%s) only in ~prod)"
            var patt)) )
# 1027 "ocamlbuild/lexers.ml"

  | 3 ->
# 136 "ocamlbuild/lexers.mll"
      ( `Var ("", Bool.True) :: path_scheme patt_allowed lexbuf )
# 1032 "ocamlbuild/lexers.ml"

  | 4 ->
# 138 "ocamlbuild/lexers.mll"
      ( [] )
# 1037 "ocamlbuild/lexers.ml"

  | 5 ->
# 139 "ocamlbuild/lexers.mll"
      ( raise (Error("Bad pathanme scheme")) )
# 1042 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_path_scheme_rec patt_allowed lexbuf __ocaml_lex_state

and unescape lexbuf =
    __ocaml_lex_unescape_rec lexbuf 100
and __ocaml_lex_unescape_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 142 "ocamlbuild/lexers.mll"
                       c
# 1054 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1) in
# 142 "ocamlbuild/lexers.mll"
                                 ( c :: unescape lexbuf )
# 1058 "ocamlbuild/lexers.ml"

  | 1 ->
let
# 143 "ocamlbuild/lexers.mll"
         c
# 1064 "ocamlbuild/lexers.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 143 "ocamlbuild/lexers.mll"
                                 ( c :: unescape lexbuf )
# 1068 "ocamlbuild/lexers.ml"

  | 2 ->
# 144 "ocamlbuild/lexers.mll"
                                 ( [] )
# 1073 "ocamlbuild/lexers.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_unescape_rec lexbuf __ocaml_lex_state

;;

